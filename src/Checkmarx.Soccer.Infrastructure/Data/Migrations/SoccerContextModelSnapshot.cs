// <auto-generated />
using System;
using Checkmarx.Soccer.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Checkmarx.Soccer.Infrastructure.Data.Migrations
{
    [DbContext(typeof(SoccerContext))]
    partial class SoccerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Checkmarx.Soccer.Domain.Entities.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId");

                    b.Property<string>("Code");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Checkmarx.Soccer.Domain.Entities.CompetitionArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Checkmarx.Soccer.Domain.Entities.Standing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetitionId");

                    b.Property<string>("Group");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Standings");
                });

            modelBuilder.Entity("Checkmarx.Soccer.Domain.Entities.TableItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Draw");

                    b.Property<int>("GoalDifference");

                    b.Property<int>("GoalsAgainst");

                    b.Property<int>("GoalsFor");

                    b.Property<int>("Lost");

                    b.Property<int>("PlayedGames");

                    b.Property<int>("Points");

                    b.Property<int>("Position");

                    b.Property<int>("StandingId");

                    b.Property<int>("TeamId");

                    b.Property<int>("Won");

                    b.HasKey("Id");

                    b.HasIndex("StandingId");

                    b.HasIndex("TeamId");

                    b.ToTable("TableItems");
                });

            modelBuilder.Entity("Checkmarx.Soccer.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Checkmarx.Soccer.Domain.Entities.Competition", b =>
                {
                    b.HasOne("Checkmarx.Soccer.Domain.Entities.CompetitionArea", "Area")
                        .WithMany("Competitions")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Checkmarx.Soccer.Domain.Entities.Standing", b =>
                {
                    b.HasOne("Checkmarx.Soccer.Domain.Entities.Competition", "Competition")
                        .WithMany("Standings")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Checkmarx.Soccer.Domain.Entities.TableItem", b =>
                {
                    b.HasOne("Checkmarx.Soccer.Domain.Entities.Standing", "Standing")
                        .WithMany("Table")
                        .HasForeignKey("StandingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Checkmarx.Soccer.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
